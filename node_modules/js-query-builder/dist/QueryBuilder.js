"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _gettype = _interopRequireDefault(require("./utils/gettype"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var QueryBuilder =
/*#__PURE__*/
function () {
  function QueryBuilder() {
    var baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    _classCallCheck(this, QueryBuilder);

    this._baseUrl = baseUrl;
    this._filters = {};
    this._sorts = [];
    this._includes = [];
    this._appends = [];
    this._fields = {};
    this._page = null;
    this._params = {};
  }

  _createClass(QueryBuilder, [{
    key: "baseUrl",
    value: function baseUrl(_baseUrl) {
      this._baseUrl = _baseUrl;
      return this;
    }
  }, {
    key: "param",
    value: function param() {
      var _this = this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      switch (args.length) {
        case 1:
          if ((0, _gettype.default)(args[0]) !== 'object') {
            throw new Error();
          }

          Object.entries(args[0]).forEach(function (entry) {
            _this.param.apply(_this, _toConsumableArray(entry));
          });
          break;

        case 2:
          if ((0, _gettype.default)(args[0]) !== 'string' || ['string', 'number', 'array'].indexOf((0, _gettype.default)(args[1])) === -1) {
            throw new Error();
          }

          this._params[args[0]] = args[1];
          break;

        default:
          throw new Error();
      }

      return this;
    }
  }, {
    key: "forgetParam",
    value: function forgetParam() {
      var _this2 = this;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (args.length === 0) {
        this._params = {};
      } else {
        args.forEach(function (arg) {
          switch ((0, _gettype.default)(arg)) {
            case 'array':
              _this2.forgetParam.apply(_this2, _toConsumableArray(arg));

              break;

            case 'string':
              delete _this2._params[arg];
              break;

            default:
              throw new Error();
          }
        });
      }

      return this;
    }
  }, {
    key: "include",
    value: function include() {
      var _this3 = this;

      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      args.forEach(function (arg) {
        switch ((0, _gettype.default)(arg)) {
          case 'array':
            _this3.include.apply(_this3, _toConsumableArray(arg));

            break;

          case 'string':
            _this3._includes.push(arg);

            break;

          default:
            throw new Error();
        }
      });
      return this;
    }
  }, {
    key: "forgetInclude",
    value: function forgetInclude() {
      var _this4 = this;

      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      if (args.length === 0) {
        this._includes = [];
      } else {
        args.forEach(function (arg) {
          switch ((0, _gettype.default)(arg)) {
            case 'array':
              _this4.forgetInclude.apply(_this4, _toConsumableArray(arg));

              break;

            case 'string':
              _this4._includes = _this4._includes.filter(function (v) {
                return v !== arg;
              });
              break;

            default:
              throw new Error();
          }
        });
      }

      return this;
    }
  }, {
    key: "append",
    value: function append() {
      var _this5 = this;

      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      args.forEach(function (arg) {
        switch ((0, _gettype.default)(arg)) {
          case 'array':
            _this5.append.apply(_this5, _toConsumableArray(arg));

            break;

          case 'string':
            _this5._appends.push(arg);

            break;

          default:
            throw new Error();
        }
      });
      return this;
    }
  }, {
    key: "forgetAppend",
    value: function forgetAppend() {
      var _this6 = this;

      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      if (args.length === 0) {
        this._appends = [];
      } else {
        args.forEach(function (arg) {
          switch ((0, _gettype.default)(arg)) {
            case 'array':
              _this6.forgetAppend.apply(_this6, _toConsumableArray(arg));

              break;

            case 'string':
              _this6._appends = _this6._appends.filter(function (v) {
                return v !== arg;
              });
              break;

            default:
              throw new Error();
          }
        });
      }

      return this;
    }
  }, {
    key: "filter",
    value: function filter() {
      var _this7 = this;

      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      switch (args.length) {
        case 1:
          if ((0, _gettype.default)(args[0]) !== 'object') {
            throw new Error();
          }

          Object.entries(args[0]).forEach(function (entry) {
            _this7.filter.apply(_this7, _toConsumableArray(entry));
          });
          break;

        case 2:
          if ((0, _gettype.default)(args[0]) !== 'string' || ['string', 'number', 'array'].indexOf((0, _gettype.default)(args[1])) === -1) {
            throw new Error();
          }

          this._filters[args[0]] = args[1];
          break;

        default:
          throw new Error();
      }

      return this;
    }
  }, {
    key: "forgetFilter",
    value: function forgetFilter() {
      var _this8 = this;

      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      if (args.length === 0) {
        this._filters = {};
      } else {
        args.forEach(function (arg) {
          switch ((0, _gettype.default)(arg)) {
            case 'array':
              _this8.forgetFilter.apply(_this8, _toConsumableArray(arg));

              break;

            case 'string':
              delete _this8._filters[arg];
              break;

            default:
              throw new Error();
          }
        });
      }

      return this;
    }
  }, {
    key: "sort",
    value: function sort() {
      var _this9 = this;

      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      args.forEach(function (arg) {
        switch ((0, _gettype.default)(arg)) {
          case 'array':
            _this9.sort.apply(_this9, _toConsumableArray(arg));

            break;

          case 'string':
            _this9._sorts.push(arg);

            break;

          default:
            throw new Error();
        }
      });
      return this;
    }
  }, {
    key: "forgetSort",
    value: function forgetSort() {
      var _this10 = this;

      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      if (args.length === 0) {
        this._sorts = [];
      } else {
        args.forEach(function (arg) {
          switch ((0, _gettype.default)(arg)) {
            case 'array':
              _this10.forgetSort.apply(_this10, _toConsumableArray(arg));

              break;

            case 'string':
              _this10._sorts = _this10._sorts.filter(function (v) {
                return v !== arg;
              });
              break;

            default:
              throw new Error();
          }
        });
      }

      return this;
    }
  }, {
    key: "fields",
    value: function fields() {
      var _this11 = this;

      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }

      switch (args.length) {
        case 1:
          if ((0, _gettype.default)(args[0]) !== 'object') {
            throw new Error();
          }

          Object.entries(args[0]).forEach(function (entry) {
            _this11.fields.apply(_this11, _toConsumableArray(entry));
          });
          break;

        case 2:
          if ((0, _gettype.default)(args[0]) !== 'string' || (0, _gettype.default)(args[1]) !== 'array') {
            throw new Error();
          }

          this._fields[args[0]] = args[1];
          break;

        default:
          throw new Error();
      }

      return this;
    }
  }, {
    key: "forgetFields",
    value: function forgetFields() {
      var _this12 = this;

      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }

      if (args.length === 0) {
        this._fields = {};
      } else {
        args.forEach(function (arg) {
          switch ((0, _gettype.default)(arg)) {
            case 'array':
              _this12.forgetFields.apply(_this12, _toConsumableArray(arg));

              break;

            case 'string':
              delete _this12._fields[arg];
              break;

            default:
              throw new Error();
          }
        });
      }

      return this;
    }
  }, {
    key: "page",
    value: function page(_page) {
      if ((0, _gettype.default)(_page) !== 'number' && (0, _gettype.default)(_page) !== 'string') {
        throw new Error();
      }

      this._page = _page;
      return this;
    }
  }, {
    key: "forgetPage",
    value: function forgetPage() {
      this._page = null;
      return this;
    }
  }, {
    key: "tap",
    value: function tap(callback) {
      if (typeof callback !== 'function') {
        throw new Error();
      }

      callback(this);
      return this;
    }
  }, {
    key: "when",
    value: function when(condition, callback) {
      if ((0, _gettype.default)(callback) !== 'function') {
        throw new Error();
      }

      condition = (0, _gettype.default)(condition) === 'function' ? condition() : condition;

      if (condition) {
        callback(this);
      }

      return this;
    }
  }, {
    key: "build",
    value: function build() {
      var params = [];
      Object.entries(this._filters).forEach(function (entry) {
        params.push(["".concat(QueryBuilder.getParameterName('filter'), "[").concat(entry[0], "]"), entry[1]]);
      });
      this._sorts.length && params.push([QueryBuilder.getParameterName('sort'), this._sorts.join(',')]);
      this._includes.length && params.push([QueryBuilder.getParameterName('include'), this._includes.join(',')]);
      this._appends.length && params.push([QueryBuilder.getParameterName('append'), this._appends.join(',')]);
      Object.entries(this._fields).forEach(function (entry) {
        params.push(["".concat(QueryBuilder.getParameterName('fields'), "[").concat(entry[0], "]"), entry[1].join(',')]);
      });

      if (this._page) {
        params.push([QueryBuilder.getParameterName('page'), this._page]);
      }

      Object.entries(this._params).forEach(function (entry) {
        params.push(entry);
      });
      var paramsString = params.sort(function (a, b) {
        return a[0] < b[0] ? -1 : 1;
      }).map(function (entry) {
        return "".concat(encodeURIComponent(entry[0]), "=").concat(encodeURIComponent(entry[1]));
      }).join('&');
      return "".concat(this._baseUrl, "?").concat(paramsString);
    }
  }], [{
    key: "defineCustomParameterNames",
    value: function defineCustomParameterNames(customParameterNames) {
      this._customParameterNames = customParameterNames;
    }
  }, {
    key: "forgetCustomParameterNames",
    value: function forgetCustomParameterNames() {
      delete this._customParameterNames;
    }
  }, {
    key: "getParameterName",
    value: function getParameterName(parameter) {
      return this._customParameterNames && this._customParameterNames.hasOwnProperty(parameter) ? this._customParameterNames[parameter] : parameter;
    }
  }]);

  return QueryBuilder;
}();

exports.default = QueryBuilder;